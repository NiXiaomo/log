<?php/** * 文章管理 * * 操作： *      index：文章列表 *      add：新建 *      edit：编辑 * * 消息处理： *      post：消息处理——新建/编辑 *      trash：消息处理——垃圾箱 *      upload：消息处理——文件上传 * * 私有方法： *      _fileUpload：获取上传文件并保存 * * @author xiaomo<xiaomo@nixiaomo.com> */namespace Home\Controller;class PostController extends BaseController{    /**     * 文章列表     */    public function index()    {        $this->checkLogged();        $m = M('post');        // 获取各分类数量        // SELECT `status`, COUNT(`status`) AS `total` FROM `log_post` GROUP BY `status`        $where_count['user'] = session('user');        $counts = $m->field('status,count(status) as total')->group('status')->where($where_count)->select();        $sum = 0;   // 记录总量        $trashFlag = false; // 回收站不计入总量        foreach ($counts as $count) {            if ($count['status'] == 3) {                $trashFlag = true;                continue;            }            $sum += intval($count['total']);        }        $this->assign("sum", $sum);        if ($sum > 0 || $trashFlag) {            $this->assign("counts", $counts);            // 判断状态            $status = I('get.post_status');            if (empty($status)) $where['status'] = array('neq', 3);            switch ($status) {                case "publish":                    $where['status'] = 1;                    break;                case "draft":                    $where['status'] = 2;                    break;                case "trash":                    $where['status'] = 3;                    break;            }            // 获取日志列表            $where['log_post.user'] = session('user');            $page = init_page($m, $where, 10); // 分页            $data = $m->field('id,title,post_date,status,count(log_comment.post_id) as total')                ->join('LEFT JOIN log_comment ON log_post.id = log_comment.post_id')                ->group('log_post.id')                ->order('post_date desc, id asc')                ->where($where)                ->limit($page->firstRow . ',' . $page->listRows)                ->select();            $this->assign("logs", $data);            $this->assign('page', $page->show());   // 赋值分页输出        }        $this->display('index');    }    /**     * 新建     */    public function add()    {        $this->checkLogged();        $this->display('add');    }    /**     * 消息处理——新建/编辑     */    public function post()    {        $this->checkLogged();        $post_date = date("Y-m-d H:i:s");        $id = I('post.p/d');        $data['title'] = I('post.title');        $data['content'] = I('post.content');        $data['status'] = I('post.status');        $data['edit_date'] = $post_date;        $m = M("post");        if ($id == 0) { // 新增            $data['user'] = session('user');            $data['post_date'] = $post_date;            $result = $m->add($data);            $insertId = $m->getLastInsID(); // 获取insert id        } else {    // 编辑            $where['id'] = $id;            $where['user'] = session('user');            $result = $m->where($where)->save($data);            $insertId = $id;        }        // 更新缓存文件        set_archive_cache(session('user'));        // 响应        if ($result > 0) {            $ajaxData['status'] = 1;            $ajaxData['info'] = U('Post/edit') . '?id=' . $insertId;        } else {            $ajaxData['status'] = 0;            $ajaxData['info'] = '操作失败！';        }        $this->ajaxReturn($ajaxData, 'JSON');    }    /**     * 消息处理——垃圾箱     */    public function trash()    {        $this->checkLogged();        $action = I('get.action');        $id = I('get.p/d');        if (!empty($action) && !empty($id)) {            $m = M("post");            if ($action == "trash" || $action == "untrash") {   // 移入/移出垃圾箱                $where['id'] = $id;                $where['user'] = session('user');                $action == "trash" ? $data['status'] = 3 : $data['status'] = 2;                $m->where($where)->save($data);            } else if ($action == "delete") {                $user = session('user');                // 需要同时删除评论                $sql = "DELETE p, c FROM `log_post` p LEFT JOIN `log_comment` c ON p.`id` = c.`post_id`                         WHERE p.`id` = $id AND p.`user` = '$user'";                $m->execute($sql);            }        }        // 更新缓存文件        set_archive_cache(session('user'));        $this->redirect('Post/index');    }    /**     * 编辑界面     */    public function edit()    {        $this->checkLogged();        $id = I('get.id/d');        if (empty($id))            $this->redirect("Index/index");        else {            $where['id'] = array('eq', $id);            $where['user'] = array('eq', session('user'));            $where['status'] = array('neq', 3);            $msg = M('post')->where($where)->find();            if (empty($msg))                $this->error("日志不存在或已被删除！");            $this->assign("id", $id);            $this->assign("title", $msg['title']);            $this->assign("content", $msg['content']);            $this->assign("edit_date", $msg['edit_date']);            $this->assign("status", intval($msg['status']));            $this->display('add');        }    }    /**     * 消息处理——文件上传     */    public function upload()    {        $path = "./Public/files/";        $filename = uniqid() . $_POST['ext'];   // 文件名        $result = $this->_fileUpload($_FILES['file'], $path, $filename);        if ($result != "success") exit($result);        echo "/log/Public/files/$filename";    }    /**     * 获取上传文件并保存     *     * @param array $fileArray $_FILES['file']     * @param string $path 文件保存路径     * @param string $filename 文件名     * @return string     */    private function _fileUpload($fileArray, $path, $filename)    {        if ($fileArray["error"] > 0) {            return "上传失败，请重试";        }        $tmp = $fileArray['tmp_name'];        if (!file_exists($path)) {            mkdir($path, 0777, true);        }        if (!move_uploaded_file($tmp, $path . $filename)) {            return "文件保存失败";        }        return "success";    }}