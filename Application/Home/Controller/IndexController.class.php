<?php/** * 首页、详情页 * * 操作： *      index：首页，文章列表 *      detail：日志详情 * * 私有方法： *      _formatComments：格式化评论数据 *      _binarySearch：二分查找获取一维数组的index * * @author xiaomo<xiaomo@nixiaomo.com> */namespace Home\Controller;class IndexController extends BaseController{    /**     * 首页，文章列表     */    public function index()    {        $this->initLogged(false);        // 查看指定作者的日志        $author = I('get.author/s');        $titleBar = ''; // 标题栏        if (!empty($author)) {            $where['u.user'] = $author;            $titleBar = "作者：" . $author;            $archive = I('get.archive');            if (!empty($archive)) {  // 指定日期                $time = strtotime($archive . '01');                $where['p.post_date'] = array('like', date('Y-m', $time) . '%');                $titleBar = date('Y年m月', $time) . "—作者：" . $author;            }        }        // 搜索日志        $s = I('get.s/s');        if (!empty($s)) {            $where['p.title|p.content'] = array('like', '%' . $s . '%');            $titleBar = "搜索：<span>" . $s . "</span>";        }        // 查询所有日志以及评论量        $where['status'] = 1;        $post = M('post')->alias('p');        $join = 'RIGHT JOIN __USER__ u ON p.user_id = u.id';        $page = init_page($post, $where, 10, $join); // 分页        // 进行分页数据查询 注意limit方法的参数要使用Page类的属性        $data = $post            ->field('p.id,title,u.user,u.nickname,post_date,p.content,count(c.post_id) as total')            ->join($join)            ->join('LEFT JOIN __COMMENT__ c ON p.id = c.post_id')            ->group('p.id')            ->order('post_date desc, id asc')            ->where($where)            ->limit($page->firstRow . ',' . $page->listRows)            ->select();        if (empty($data)) {            $titleBar = "有点尴尬唉！没有捕捉到内容。";            $show = '';        } else {            if (!empty($titleBar)) {                $titleBar .= '(' . $page->totalRows . ')';            }            $show = bootstrap_page_style($page->show());        }        $this->assign("logs", $data);        $this->assign('page', $show);   // 赋值分页输出        // 输出标题栏        if (!empty($titleBar)) {            $this->assign("titleBar", $titleBar);        }        $this->display('index');    }    /**     * 日志详情     */    public function detail()    {        $this->initLogged(false);        $post_id = I('get.p/d');        if (empty($post_id)) {            $this->assign('tips', '有点尴尬唉！没有捕捉到内容。');        } else {            // 消息推送模块进入            $comment_id = I('get.comment/d');            if (!empty($comment_id) && session('user_id')) {                // TODO 此处缺乏对身份的验证                M('comment')                    ->where(array('comment_id' => $comment_id))                    ->save(array("comment_pushed" => 1));            }            // 根据id获取指定日志            $where = array();            $where['p.id'] = $post_id;            $where['status'] = 1;            $log = M('post')->alias('p')                ->field('p.id,title,user_id,u.user,u.nickname,post_date,content')                ->join('RIGHT JOIN __USER__ u ON u.id = p.user_id')                ->order('post_date desc')                ->where($where)                ->find();            if (empty($log)) {                $this->assign("tips", "有点尴尬唉！没有捕捉到内容。");            } else {                session('redirect_to', U('Index/detail') . '?p=' . $post_id);                if (session('user_id') && session('user_id') == $log['user_id'])                    $this->assign('identity', "author");    // 访问者为日志发布者                $this->assign('log', $log); // 日志内容                // 根据post_id获取所有评论                $where = array();                $where['c.post_id'] = $post_id;                $comment_data = M('comment')->alias('c')                    ->field('c.comment_id,c.user_id,                            c.comment_author AS child_author,                            c.comment_author_email AS child_email,                            c.comment_author_url AS child_url,                            c.comment_date,c.content,c.comment_parent,                            c.comment_parent_author AS parent_author,                            p.comment_author_email AS parent_email,                            p.comment_author_url AS parent_url')                    ->join('LEFT JOIN __COMMENT__ p ON c.comment_parent = p.comment_id')                    ->order('c.comment_date asc, c.comment_id asc')                    ->where($where)                    ->select();                if (!empty($comment_data)) {                    $this->assign('comment_title',                        '《' . $log['title'] . '》有' . count($comment_data) . '条评论');                    // 格式化评论数据                    $newComments = $this->_formatComments($comment_data);                    $this->assign('comment_data', $newComments);                }            }        }        $this->display('detail');    }    /**     * 格式化评论数据     *     * @param $comment_data     * @return array     */    private function _formatComments($comment_data)    {        $newComments = array();//        $prev = 0;  // 记录父评论index        foreach ($comment_data as $comment) {            $parentId = intval($comment['comment_parent']);            if ($parentId == 0) {   // 一级评论                $newComments[] = $comment;//                $prev = count($newComments) - 1;            } else {    // 二级评论                $index = $this->_binarySearch($newComments, $parentId);  // 二分查找获取index                /*// 可能父评论同为二级评论                if ($index < 0 && !empty($newComments[$prev]["children_list"])) {                    $index = $this->_binarySearch($newComments[$prev]["children_list"], $parentId);  // 二分查找获取index                    if ($index >= 0) {                        $newComments[$prev]["children_list"][] = $comment;                    }                    continue;                }                // 父评论被删除子评论还在，所以index=-1                if ($index >= 0) {                    $newComments[$index]["children_list"][] = $comment;                }*/                // 二级评论的父评论只能为一级评论                if ($index < 0) continue;                $newComments[$index]["children_list"][] = $comment;            }        }        return $newComments;    }    /**     * 二分查找获取一维数组的index     *     * @param array $arr     * @param int $target     * @return float|int     */    private function _binarySearch($arr, $target)    {        $low = 0;        $high = count($arr) - 1;        while ($low <= $high) {            $mid = floor(($low + $high) / 2);            $commentId = intval($arr[$mid]["comment_id"]);            // 找到元素            if ($commentId == $target) return $mid;            // 中元素比目标大,查找左部            if ($commentId > $target) $high = $mid - 1;            // 中元素比目标小,查找右部            if ($commentId < $target) $low = $mid + 1;        }        // 查找失败        return -1;    }}