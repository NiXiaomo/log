<?php/** * 公共函数 * * logger：日志记录 * init_page：初始化分页类 * bootstrap_page_style：Thinkphp默认分页样式转Bootstrap分页样式 * pushed_comment：推送评论信息 * * @author xiaomo<xiaomo@nixiaomo.com> *//** * 日志记录 * * 位置：./Public/files/log.xml * * @param $log_content */function logger($log_content){    $max_size = 10000;    $log_filename = "./Public/files/log.xml";    if (file_exists($log_filename) and (abs(filesize($log_filename)) > $max_size)) {        file_put_contents($log_filename, "");    }    file_put_contents($log_filename, date('Y-m-d H:i:s') . " " . $log_content . "\r\n", FILE_APPEND);}/** * * 初始化分页类 * * @param \Think\Model $m 模型，引用传递 * @param array $where 查询条件 * @param int $pageSize 每页查询条数 * @param string $join join查询字符串 * @return \Think\Page */function init_page(&$m, $where, $pageSize = 10, $join = ''){    $m1 = clone $m; // 浅复制一个模型    $count = $m->join($join)->where($where)->count();   // 连惯操作后会对join等操作进行重置    $m = $m1;   // 为保持在为定的连惯操作，浅复制一个模型    $p = new Think\Page($count, $pageSize);    $p->rollPage = 5;    $p->lastSuffix = false;    $p->setConfig('header', '<li class="disabled hwh-page-info"><a>共<em>%TOTAL_ROW%</em>条          <em>%NOW_PAGE%</em>/<em>%TOTAL_PAGE%</em>页</a></li>');    $p->setConfig('prev', '«');    $p->setConfig('next', '»');    $p->setConfig('last', '末页');    $p->setConfig('first', '首页');    $p->setConfig('theme', '%HEADER% %FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END%');    return $p;}/** * Thinkphp默认分页样式转Bootstrap分页样式 * * @param string $page_html tp默认输出的分页html代码 * @return string 新的分页html代码 */function bootstrap_page_style($page_html){    if ($page_html) {        // 替换开头结尾        $page_show = str_replace('<div>', '<nav><ul class="pagination">', $page_html);        $page_show = str_replace('</div>', '</ul></nav>', $page_show);        // 替换当前项样式        $page_show = str_replace('<span class="current">', '<li class="active"><a>', $page_show);        $page_show = str_replace('</span>', '</a></li>', $page_show);        // 替换页码样式        $page_show = str_replace(            array(                '<a class="num"',                '<a class="prev"',                '<a class="next"',                '<a class="end"',                '<a class="first"'            ),            '<li><a',            $page_show        );        $page_show = str_replace('</a>', '</a></li>', $page_show);    }    return $page_show;}/** * 推送评论信息 * * @param $user * @return mixed */function pushed_comment($user){    // 回复我或评论我的文章，且不是我自己做的    $userWhere['p.user'] = $user;    $userWhere['comment_respond'] = $user;    $userWhere['_logic'] = "or";    $where['_complex'] = $userWhere;    // 复合查询    $where['p.status'] = 1;    $where['comment_pushed'] = 2;    $where['c.user'] = array('neq', $user);    return M("comment")        ->alias('c')        ->field("comment_id,post_id,c.user,comment_respond,comment_date,c.content,comment_parent")        ->join("RIGHT JOIN __POST__ p ON c.post_id = p.id")        ->where($where)        ->order("comment_date desc, comment_id desc")        ->select();}