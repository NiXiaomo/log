<?php/** * 公共函数 * * logger：日志记录 * check_verify：检查验证码 * auth_psw：加密 * init_page：初始化分页类 * bootstrap_page_style：Thinkphp默认分页样式转Bootstrap分页样式 * pushed_comment：推送评论信息 * get_gravatar：获取Gravatar头像 * cut_html_str：截取含有html标签的字符串 * * @author xiaomo<i@nixiaomo.com> *//** * 日志记录 * * 位置：./Public/files/log.xml * * @param $log_content */function logger($log_content){    $max_size = 10000;    $log_filename = "./Public/files/log.xml";    if (file_exists($log_filename) and (abs(filesize($log_filename)) > $max_size)) {        file_put_contents($log_filename, "");    }    // 获取时间、IP、地址    $ip = get_client_ip();    $data = "\r\n时间：" . $_SERVER['REQUEST_TIME']        . "\r\nIP：" . $ip        . "\r\n地址：" . getLoginAddress($ip)        . "\r\n" . $log_content;    file_put_contents($log_filename, $data, FILE_APPEND);}/** * 根据ip地址获取坐标 * * @param $ip * @return mixed */function getLoginAddress($ip){    // 根据百度地图普通IP定位API服务获取坐标    $content = file_get_contents(sprintf(C('BD_LOCATION_URL'), C('BD_LOCATION_AK'), $ip));    $json = json_decode($content, true);    return $json['content']['address']; // 按层级关系提取address数据}/** * 检查验证码 * * @param $code * @param string $id * @return bool */function check_verify($code, $id = ''){    $verify = new \Think\Verify();    return $verify->check($code, $id);}/** * 加密 * * @param $str * @return string */function auth_psw($str){    $key = substr(md5(C('COOKIE_DOMAIN')), 5, 8);    $str = substr(md5($str), 8, 10);    return md5($key . $str);}/** * * 初始化分页类 * * @param \Think\Model $m 模型，引用传递 * @param array $where 查询条件 * @param int $pageSize 每页查询条数 * @param string $join join查询字符串 * @return \Think\Page */function init_page(&$m, $where, $pageSize = 10, $join = ''){    $m1 = clone $m; // 浅复制一个模型    $count = $m->join($join)->where($where)->count();   // 连惯操作后会对join等操作进行重置    $m = $m1;   // 为保持在为定的连惯操作，浅复制一个模型    $p = new Think\Page($count, $pageSize);    $p->rollPage = 5;    $p->lastSuffix = false;    $p->setConfig('header', '<li class="disabled hwh - page - info"><a>共<em>%TOTAL_ROW%</em>条          <em>%NOW_PAGE%</em>/<em>%TOTAL_PAGE%</em>页</a></li>');    $p->setConfig('prev', '«');    $p->setConfig('next', '»');    $p->setConfig('last', '末页');    $p->setConfig('first', '首页');    $p->setConfig('theme', '%HEADER% %FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END%');    return $p;}/** * Thinkphp默认分页样式转Bootstrap分页样式 * * @param string $page_html tp默认输出的分页html代码 * @return string 新的分页html代码 */function bootstrap_page_style($page_html){    if ($page_html) {        // 替换开头结尾        $page_show = str_replace('<div>', '<nav><ul class="pagination">', $page_html);        $page_show = str_replace('</div>', '</ul></nav>', $page_show);        // 替换当前项样式        $page_show = str_replace('<span class="current">', '<li class="active"><a>', $page_show);        $page_show = str_replace('</span>', '</a></li>', $page_show);        // 替换页码样式        $page_show = str_replace(            array(                '<a class="num"',                '<a class="prev"',                '<a class="next"',                '<a class="end"',                '<a class="first"'            ),            '<li><a',            $page_show        );        $page_show = str_replace('</a>', '</a></li>', $page_show);    }    return $page_show;}/** * 推送评论信息 * * @return mixed */function pushed_comment(){    $userId = session('user_id');    // 自己文章的一级评论    $cWhere['p.user_id'] = $userId; // 自己发布的文章    $cWhere['c.comment_parent'] = 0;  // 一级评论    // 我的一级评论的二级回复    $parentWhere['_complex'] = $cWhere;    $parentWhere['c_parent.user_id'] = array('eq', $userId);    // 父评论者是自己    $parentWhere['_logic'] = " or ";    $where['_complex'] = $parentWhere;    // 复合查询    $where['p.status'] = 1; // 已发布的文章    $where['c.comment_pushed'] = 2; // 未读的评论    $where['c.user_id'] = array('neq', $userId);    // 评论者不是自己    return M("Comments")        ->alias('c')        ->field("c . comment_id,c . post_id,c . comment_author,c . comment_date,c . content,c . comment_parent")        ->join("LEFT JOIN __COMMENTS__ c_parent ON c . comment_parent = c_parent . comment_id")        ->join("RIGHT JOIN __POSTS__ p ON c . post_id = p . id")        ->where($where)        ->order("c . comment_date desc, c . comment_id desc")        ->select();}/** * 获取Gravatar头像 * * @param string $email The email address * @param int $s Size in pixels, defaults to 80px [ 1 - 2048 ] * @param string $d Default imageset to use [ 404 | mm | identicon | monsterid | wavatar ] * @param string $r Maximum rating (inclusive) [ g | pg | r | x ] * @return String containing either just a URL * @source https://gravatar.com/site/implement/images/php/ */function get_gravatar($email, $s = 80, $d = 'mm', $r = 'g'){    // 备用地址：https://cdn.v2ex.com/gravatar/    $url = 'https://www.gravatar.com/avatar/';    $url .= md5(strtolower(trim($email)));    $url .= " ? s = $s & d = $d & r = $r";    return $url;}/** * 截取含有html标签的字符串 * * @param string $str 待截取字符串 * @param int $length 截取长度 * @param string $replace 超出的内容用$replace替换之（该参数可以为带有html标签的字符串）默认 ...... * @param string $anchor 截取锚点，如果截取过程中遇到这个标记锚点就截至该锚点处 * @return string $result 返回值 * @demo  $res = cut_html_str($str, 256); // 截取256个长度 */function cut_html_str($str, $length, $replace = ' ......', $anchor = '<!-- break -->'){    $_length = mb_strlen($str, "utf - 8"); // 统计字符串长度（中、英文都算一个字符）    if ($_length <= $length) {        return $str;    // 传入的字符串长度小于截取长度，原样返回    }    $strlen_var = strlen($str);     // 统计字符串长度（UTF8编码下-中文算3个字符，英文算一个字符）    if (strpos($str, '<') === false) {        return mb_substr($str, 0, $length);  // 不包含 html 标签 ，直接截取    }    if ($e = strpos($str, $anchor)) {        return mb_substr($str, 0, $e);  // 包含截断标志，优先    }    $html_tag = 0;  // html 代码标记    $result = '';   // 摘要字符串    $html_array = array('left' => array(), 'right' => array()); //记录截取后字符串内出现的 html 标签，开始=>left,结束=>right    /*    * 如字符串为：<h3><p><b>a</b></h3>，假设p未闭合，数组则为：array('left'=>array('h3','p','b'), 'right'=>'b','h3');    * 仅补全 html 标签，<? <% 等其它语言标记，会产生不可预知结果    */    $html_array_str = '';    for ($i = 0; $i < $strlen_var; ++$i) {        if (!$length) break;  // 遍历完之后跳出        $current_var = substr($str, $i, 1); // 当前字符        if ($current_var == '<') { // html 代码开始            $html_tag = 1;            $html_array_str = '';        } else if ($html_tag == 1) { // 一段 html 代码结束            if ($current_var == '>') {                $html_array_str = trim($html_array_str); //去除首尾空格，如 <br / > < img src="" / > 等可能出现首尾空格                if (substr($html_array_str, -1) != '/') { //判断最后一个字符是否为 /，若是，则标签已闭合，不记录                    // 判断第一个字符是否 /，若是，则放在 right 单元                    $f = substr($html_array_str, 0, 1);                    if ($f == '/') {                        $html_array['right'][] = str_replace('/', '', $html_array_str); // 去掉 '/'                    } else if ($f != '?') { // 若是?，则为 PHP 代码，跳过                        // 若有半角空格，以空格分割，第一个单元为 html 标签。如：<h2 class="a"> <p class="a">                        if (strpos($html_array_str, ' ') !== false) {                            // 分割成2个单元，可能有多个空格，如：<h2 class="" id="">                            $html_array['left'][] = strtolower(current(explode(' ', $html_array_str, 2)));                        } else {                            //若没有空格，整个字符串为 html 标签，如：<b> <p> 等，统一转换为小写                            $html_array['left'][] = strtolower($html_array_str);                        }                    }                }                $html_array_str = ''; // 字符串重置                $html_tag = 0;            } else {                $html_array_str .= $current_var; //将< >之间的字符组成一个字符串,用于提取 html 标签            }        } else {            --$length; // 非 html 代码才记数        }        $ord_var_c = ord($str{$i});        switch (true) {            case (($ord_var_c & 0xE0) == 0xC0): // 2 字节                $result .= substr($str, $i, 2);                $i += 1;                break;            case (($ord_var_c & 0xF0) == 0xE0): // 3 字节                $result .= substr($str, $i, 3);                $i += 2;                break;            case (($ord_var_c & 0xF8) == 0xF0): // 4 字节                $result .= substr($str, $i, 4);                $i += 3;                break;            case (($ord_var_c & 0xFC) == 0xF8): // 5 字节                $result .= substr($str, $i, 5);                $i += 4;                break;            case (($ord_var_c & 0xFE) == 0xFC): // 6 字节                $result .= substr($str, $i, 6);                $i += 5;                break;            default: // 1 字节                $result .= $current_var;        }    }    if ($html_array['left']) { //比对左右 html 标签，不足则补全        $html_array['left'] = array_reverse($html_array['left']); //翻转left数组，补充的顺序应与 html 出现的顺序相反        foreach ($html_array['left'] as $index => $tag) {            $key = array_search($tag, $html_array['right']); // 判断该标签是否出现在 right 中            if ($key !== false) { // 出现，从 right 中删除该单元                unset($html_array['right'][$key]);            } else { // 没有出现，需要补全                $result .= '</' . $tag . '>';            }        }    }    return $result . $replace;}